<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper    
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"    
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="text">
	<!-- 
	namespace：命名空间，它的作用就是对SQL进行分类化管理，可以理解为SQL隔离
	注意：使用mapper代理开发时，namespace有特殊且重要的作用
 -->

	<!-- 根据用户ID，查询用户信息 -->
	<!-- 
		[id]：statement的id，要求在命名空间内唯一  
		[parameterType]：入参的java类型
		[resultType]：查询出的单条结果集对应的java类型
		[#{}]： 表示一个占位符?
		[#{id}]：表示该占位符待接收参数的名称为id。注意：如果参数为简单类型时，#{}里面的参数名称可以是任意定义
	 -->
	<select id="findUserById" parameterType="int" resultType="com.mybatis.po.User">
		SELECT * FROM USER WHERE id=#{id}
	</select>
	<!-- 根据用户名称模糊查询用户列表 -->
	<!-- ${}：表示一个sql的连接符 -->
	<!-- ${value}：里面的value表示输入参数的参数名称，如果该参数是简单类型，那么${}里面的参数名称必须是value -->
	<!-- ${}这种写法存在sql注入的风险，所以要慎用！！但是在一些场景下，必须使用${}，比如排序时，动态传入排序的列名，${}会原样输出，不加解释 -->
	<!-- 模糊查找用户 -->
	<select id="findUsersByName" parameterType="java.lang.String"
		resultType="com.mybatis.po.User">
		SELECT * FROM USER WHERE username LIKE '%${value}%'
	</select>
	
	<!-- 添加用户 -->
	<!-- selectKey：查询主键，在标签内需要输入查询主键的sql -->
	<!-- order：指定查询主键的sql和insert语句的执行顺序，相当于insert语句来说 -->
	<!-- LAST_INSERT_ID：该函数是mysql的函数，获取自增主键的ID，它必须配合insert语句一起使用 -->
	<insert id="insertUsers" parameterType="com.mybatis.po.User" >
	<!-- 查询当前添加用户自增的id -->
	<selectKey keyProperty="id" resultType="int" order="AFTER">
		select LAST_INSERT_ID()
	</selectKey>
		INSERT INTO USER(username,birthday,sex,address) VALUES(#{username},#{birthday},#{sex},#{address})
	</insert>
	<!-- 删除用户 -->
	<delete id="deleteUserByUserName" parameterType="String">
		DELETE FROM USER WHERE username=#{username}
	</delete>
	<!-- 修改用户信息 -->
	<update id="updateUserInfo" parameterType="com.mybatis.po.User">
		UPDATE USER SET address=#{address},sex=#{sex} WHERE username=#{username}
	</update>
</mapper>